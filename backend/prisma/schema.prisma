generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now()) @updatedAt
  name       String          @db.VarChar(100)
  identifier String          @unique @db.VarChar(12)
  email      String          @unique @db.VarChar(60)
  password   String          @db.VarChar(200)
  leads      Lead[]
  tokens     Token[]
  pipelines  Pipeline_User[]

  @@map("users")
}

model Token {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  access_token String
  is_revoked   Boolean  @default(false)
  type         String   @default("login")
  user         User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_id      String?  @db.Uuid()

  @@map("tokens")
}

model Pipeline {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name       String           @db.VarChar(100)
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now()) @updatedAt
  phases     Pipeline_Phase[]
  users      Pipeline_User[]

  @@map("pipelines")
}

model Pipeline_User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  user_id     String   @db.Uuid()
  pipeline_id String   @db.Uuid()

  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  pipeline Pipeline @relation(fields: [pipeline_id], references: [id], onDelete: Cascade)

  @@unique([user_id, pipeline_id])
  @@map("pipeline_users")
}

model Pipeline_Phase {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  name        String    @db.VarChar(100)
  pipeline    Pipeline? @relation(fields: [pipeline_id], references: [id], onDelete: SetNull)
  pipeline_id String?   @db.Uuid()
  leads       Lead[]

  @@map("pipeline_phases")
}

model Lead {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now()) @updatedAt
  name              String          @db.VarChar(100)
  phone             String          @db.VarChar(20)
  email             String          @db.VarChar(60)
  user              User?           @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_id           String?         @db.Uuid()
  pipeline_phase    Pipeline_Phase? @relation(fields: [pipeline_phase_id], references: [id], onDelete: SetNull)
  pipeline_phase_id String?         @db.Uuid()

  @@map("leads")
}
